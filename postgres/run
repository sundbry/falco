#!/bin/bash

POSTGRESQL_CONF=/etc/service/postgres/postgresql.conf

function create_base_backup {
  logger "Creating wal-e base backup"
  setuser postgres wal-e backup-push $PGDATA
  if [ $? -eq 0 ]; then
    logger "Trimming wal-e backups"
    wal-e delete --confirm retain 3
  fi
}

function get_last_backup {
  out=$(setuser postgres wal-e backup-list LATEST | grep -v last_modified | tail -n 1)
  logger "last backup: '$out'"
  echo $out
}

function check_base_backup {
  #logger "Checking wal-e base backup"
  #last_backup=$(get_last_backup)
  last_backup="" # Always create new base backup on restart

  if [ -z "$last_backup" ]; then
    create_base_backup
  else
    logger "Running from wal-e base backup: ${last_backup}"
  fi
}

function defer_check_base_backup {
  let ready=1
  while [ $ready -ne 0 ]; do
    sleep 1
    pg_isready -U $POSTGRES_USER
    ready=$?
  done
  check_base_backup
}

function postgres_common_init {
  mkdir -p "$PGDATA"
  chmod 700 "$PGDATA"
  chown -R postgres "$PGDATA"

  chmod g+s /run/postgresql
  chown -R postgres /run/postgresql
}

function write_pg_hba_conf {
  # check password first so we can output the warning before postgres
  # messes it up
  if [ "$POSTGRES_PASSWORD" ]; then
    pass="PASSWORD '$POSTGRES_PASSWORD'"
    authMethod=md5
  else
    # The - option suppresses leading tabs but *not* spaces. :)
    cat >&2 <<-'EOWARN'
      ****************************************************
      WARNING: No password has been set for the database.
               This will allow anyone with access to the
               Postgres port to access your database. In
               Docker's default configuration, this is
               effectively any other container on the same
               system.

               Use "-e POSTGRES_PASSWORD=password" to set
               it in "docker run".
      ****************************************************
EOWARN

    pass=
    authMethod=trust
  fi

  echo "local postgres postgres trust" > "$PGDATA/hb_hba.conf"
  { echo; echo "host all all 0.0.0.0/0 $authMethod"; } >> "$PGDATA/pg_hba.conf"

  echo $pass
}

# Initialize a new database
function init_postgres {
  postgres_common_init
  eval "setuser postgres initdb $POSTGRES_INITDB_ARGS"

  pass=$(write_pg_hba_conf)

  # internal start of server in order to allow set-up using psql-client		
  # does not listen on external TCP/IP and waits until start finishes
  setuser postgres pg_ctl -D "$PGDATA" \
    -o "-c listen_addresses='localhost'" \
    -w start

  : ${POSTGRES_USER:=postgres}
  : ${POSTGRES_DB:=$POSTGRES_USER}
  export POSTGRES_USER POSTGRES_DB

  psql=( psql -v ON_ERROR_STOP=1 )

  if [ "$POSTGRES_DB" != 'postgres' ]; then
    "${psql[@]}" --username postgres <<-EOSQL
      CREATE DATABASE "$POSTGRES_DB" ;
EOSQL
    echo
  fi

  if [ "$POSTGRES_USER" = 'postgres' ]; then
    op='ALTER'
  else
    op='CREATE'
  fi
  "${psql[@]}" --username postgres <<-EOSQL
    $op USER "$POSTGRES_USER" WITH SUPERUSER $pass ;
EOSQL
  echo

  psql+=( --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" )

  setuser postgres pg_ctl -D "$PGDATA" -m fast -w stop

  logger 'PostgreSQL init process complete.'
}

function restore_postgres {
  postgres_common_init
  logger "Loading postgres restoration from backup"
  setuser postgres wal-e backup-fetch $PGDATA LATEST
  echo "restore_command = 'wal-e wal-fetch \"%f\" \"%p\"'" > $PGDATA/recovery.conf
  chown postgres:postgres $PGDATA/recovery.conf
  pass=$(write_pg_hba_conf)
}

# Launch postgres
function start_postgres {
  if [ ! -s "$PGDATA/PG_VERSION" ]; then
    last_backup=$(get_last_backup)
    if [ -z "$last_backup" ]; then
      init_postgres
    else
      restore_postgres
    fi
  else
    postgres_common_init
  fi

  defer_check_base_backup &

  exec setuser postgres "$@"
}

# Fuction for running as a job, with script as entrypoint
function run_once {
  # Disable normal process
  touch /etc/service/postgres/down

  # Initialize system
  /sbin/my_init &
  sleep 5

  $@
  RESULT=$?

  # Flush syslog
  sv stop syslog-ng
  sleep 1
  exit $RESULT
}

trap 'kill $(jobs -p)' EXIT

if [ -z "$1" ]; then
  sleep 3 # Let syslogd start up
  start_postgres "postgres" "-c" "config_file=${POSTGRESQL_CONF}"
elif [ "$1" = "init" ]; then
  run_once "init_postgres"
else
  exec "$@"
fi
